on:
  workflow_dispatch:
permissions:
  id-token: write
  contents: read
jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: copilot
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login (verbose)
        uses: Azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
          enable-AzPSSession: false
        env:
          ACTIONS_STEP_DEBUG: true
          ACTIONS_RUNNER_DEBUG: true

      - name: Debug OIDC token file
        run: |
          echo "AZURE_FEDERATED_TOKEN_FILE: $AZURE_FEDERATED_TOKEN_FILE"
          ls -l $AZURE_FEDERATED_TOKEN_FILE || echo "File not found"
          printenv | grep AZURE

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # - name: Install @azure/mcp (Linux) globally from tgz
      #   run: npm install -g .build\\testing.tgz --verbose
      
      # - name: Log @azure/mcp installed path
      #   run: |
      #     npm list -g --depth=0 | grep '@azure/mcp' || echo "@azure/mcp not found in global npm list"
      #     npm root -g
      
      # - name: Verify @azure/mcp is available
      #   run: |
      #     npx @azure/mcp --version
      
      # - name: Generate Azure Load Testing Data Plane Access Token
      #   id: get_token
      #   run: |
      #     ACCESS_TOKEN=$(az account get-access-token --scope https://cnt-prod.loadtesting.azure.com/.default --query accessToken -o tsv)
      #     if [ -z "$ACCESS_TOKEN" ]; then
      #       echo "Failed to get access token"
      #       exit 1
      #     fi
      #     echo "::add-mask::$ACCESS_TOKEN"
      #     echo "AZURE_MCP_STATIC_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      # - name: Log AZURE_FEDERATED_TOKEN_FILE
      #   run: |
      #     echo "AZURE_FEDERATED_TOKEN_FILE is set to: $AZURE_FEDERATED_TOKEN_FILE"
      #     echo "AZURE_FEDERATED_TOKEN_FILE=$AZURE_FEDERATED_TOKEN_FILE" >> $GITHUB_ENV

      # - name: Write OIDC token to file for container use
      #   run: |
      #     # Request a GitHub OIDC token and write it to a file for use in Docker or SDKs
      #     export OIDC_TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value')
      #     echo "$OIDC_TOKEN" > /tmp/github_oidc_token
      #     echo "AZURE_FEDERATED_TOKEN_FILE=/tmp/github_oidc_token" >> $GITHUB_ENV
      #     echo "Wrote OIDC token to /tmp/github_oidc_token"

      # - name: Verify OIDC token file exists
      #   run: |
      #     ls -l /tmp/github_oidc_token
      #     head -c 100 /tmp/github_oidc_token | base64

      - name: Create package directory
        run: mkdir -p package

      - name: Extract @azure/mcp package from tarball
        run: |
          tar -xzf ./.build/testing.tgz -C package --strip-components=1
          echo "Extracted tarball contents:"
          ls -l

      - name: Ensure index.js is executable
        run: chmod +x package/index.js
        shell: bash
        # Try this step locally in WSL if possible before running in CI

      - name: Install alt from extracted package
        run: npm install -g ./package --verbose

      - name: Verify alt is installed
        run: |
          npm list -g --depth=0 | grep 'mcp' || echo "mcp not found in global npm list"
          npm root -g
          npx --no azmcp-linux-x64 --version || echo "npx mcp failed"